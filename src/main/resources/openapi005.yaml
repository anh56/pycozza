openapi: 3.0.0
info:
  title: Pycozza API
  description: This is API for pizza ordering app for Pyco
  contact:
    email: 01ntanh9a3@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.5
servers:
- url: https://virtserver.swaggerhub.com/anh56/pycozza/
  description: SwaggerHub API Auto Mocking
- url: http://ec2-52-221-224-159.ap-southeast-1.compute.amazonaws.com:8080/pycozza/
tags:
- name: product
- name: category
- name: user
- name: order
paths:
  /product:
    post:
      summary: adds a product
      description: Adds an item to the system
      operationId: addProduct
      requestBody:
        description: Create product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        "201":
          description: item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectCreationSuccessResponse'
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing item already exists
  /product/{categoryId}:
    get:
      tags:
      - product
      summary: get all products by category
      operationId: getProductByCategoryId
      parameters:
      - name: categoryId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          default: 1
      responses:
        "200":
          description: all products belong to a category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
        "400":
          description: bad input parameter
  /category:
    get:
      tags:
      - category
      summary: get category
      operationId: getCategory
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryListResponse'
        "400":
          description: bad input parameter
  /user/signup:
    post:
      summary: adds a user
      description: Adds a user to the system
      operationId: addUser
      requestBody:
        description: Create user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        "201":
          description: user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectCreationSuccessResponse'
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing user already exists
  /user/signin:
    post:
      tags:
        - user
      summary: get user
      operationId: checkUser
      requestBody:
        description: check user
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CheckUserRequest'
      responses:
        '200':
          description: user credential match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseModel'
        '400':
          description: bad input parameter

  /order/add:
    post:
      summary: adds an order
      description: Adds an order to the system
      operationId: addOrder
      requestBody:
        description: add an order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        "201":
          description: user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectCreationSuccessResponse'
        "400":
          description: invalid input, object invalid
        "409":
          description: an existing item already exists

  /order/{email}:
    get:
      tags:
      - order
      summary: get order history
      operationId: getOrderHistory
      parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: search orders matching email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
        "400":
          description: bad input parameter


  /order/email:
    get:
      tags:
        - order
      summary: get order
      operationId: getOrderHistoryParam
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: search orders matching email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
        "400":
          description: bad input parameter
components:
  schemas:
    UserListResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/UserResponseModel'
    UserResponseModel:
      type: object
      properties:
        fullName:
          type: string
          example: Example User
        email:
          type: string
        phone:
          type: string
        address:
          type: string

    CategoryListResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryResponseModel'
    CategoryResponseModel:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Example Category

    ProductListResponse:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductResponseModel'

    ProductResponseModel:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: Example Pizza
        imgLink:
          type: string
        price:
          type: integer
        maxPrice:
          type: integer
        description:
          type: string

    OrderListResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderResponseModel'

    OrderResponseModel:
      required:
      - cart
      - totalPrice
      - user
      type: object
      properties:
        cart:
          type: array
          items:
            $ref: '#/components/schemas/OrderProductResponseModel'
        email:
          type: string
        note:
          type: string
        user:
          $ref: '#/components/schemas/UserResponseModel'
        paymentMethod:
          type: string
        orderTime:
          type: string
        totalPrice:
          type: integer

    CreateOrderRequest:
      type: object
      properties:
        cart:
          type: array
          items:
            $ref: '#/components/schemas/OrderProductResponseModel'
        email:
          type: string
        note:
          type: string
        orderTime:
          type: string
        orderUserInformation:
          $ref: '#/components/schemas/UserResponseModel'
        paymentMethod:
          type: string
        totalPrice:
          type: integer

    OrderProductResponseModel:
      type: object
      properties:
        name:
          type: string
          example: Example Pizza Size M
        price:
          type: integer
        quantity:
          type: integer

    CreateProductRequest:
      type: object
      properties:
        name:
          type: string
          example: Example Pizza
        categoryId:
          type: integer
        imgLink:
          type: string
        price:
          type: integer
        description:
          type: string

    CreateUserRequest:
      type: object
      properties:
        fullName:
          type: string
        email:
          type: string
        phone:
          type: string
        password:
          type: string
          format: password

    CheckUserRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          format: password

    ObjectCreationSuccessResponse:
      type: object
      properties:
        id:
          type: string
        status:
          type: integer

    ApiError:
      type: object
      properties:
        faults:
          type: array
          items:
            $ref: '#/components/schemas/Fault'
        responseCode:
          type: integer

    Fault:
      type: object
      properties:
        internalMessage:
          type: string
        code:
          type: integer
        userMessage:
          type: string
